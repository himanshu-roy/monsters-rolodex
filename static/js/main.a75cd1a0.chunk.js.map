{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search/search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","modifiedMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,G,MAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAG,+BAA0BF,EAAQG,GAAlC,0BACHC,IAAI,YAER,6BAAMJ,EAAQK,OACd,kCAAML,EAAQM,cCNbC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,qBAAKP,UAAU,YAAf,SAEQO,EAASC,KAAI,SAACT,GAAD,OACT,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCP1BO,G,MAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAClC,OACI,uBACEC,KAAK,SACLF,YAAaA,EACbV,UAAU,SACVa,SAAUF,MC8BLG,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAEf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBANR,E,gEASO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAAEhB,SAAUe,S,mCAG/BE,GACXC,KAAKF,SAAS,CAACP,YAAaQ,EAAEE,OAAOC,U,+BAG7B,IAAD,EAC2BF,KAAKV,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZY,EAAmBZ,EAAcT,EAASsB,QAAO,SAAA9B,GAAO,OAAIA,EAAQK,KAAK0B,cAAcC,SAASf,MAAgBT,EACtH,OACE,sBAAKP,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAQU,YAAY,kBAAkBC,aAAcc,KAAKd,eACzD,cAAC,EAAD,CACEJ,SAAUqB,W,GA7BFI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a75cd1a0.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nexport const Card = ({ monster }) => {\n    return(\n        <div className=\"card-container\">\n            <img \n                src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} \n                alt=\"monster\"\n            />\n            <h2>{ monster.name }</h2>\n            <p> { monster.email }</p>\n        </div>\n    )\n}","import React from 'react';\n\nimport {Card} from '../card/card';\n\nimport './card-list.css';\n\nexport const CardList = ({ monsters }) => {\n    return(\n        <div className=\"card-list\">\n            { \n                monsters.map((monster) => (\n                    <Card key={monster.id} monster={monster}/>\n                )) \n            }\n        </div>\n    );\n}","import React from \"react\";\n\nimport \"./search.css\";\n\nexport const Search = ({ placeholder, handleChange }) => {\n    return(\n        <input \n          type=\"search\" \n          placeholder={placeholder}\n          className=\"search\" \n          onChange={handleChange} \n        />\n    )\n}","import { React, Component } from 'react';\nimport { CardList } from './components/card-list/card-list';\nimport { Search } from './components/search/search';\n\nimport './App.css';\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState( { monsters: users }))\n  }\n\n  handleChange(e) {\n    this.setState({searchField: e.target.value});\n  }\n  \n  render() {\n    const { monsters, searchField } = this.state;\n    const modifiedMonsters = searchField ? monsters.filter(monster => monster.name.toLowerCase().includes(searchField)) : monsters;\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search placeholder=\"Search Monsters\" handleChange={this.handleChange}/>\n        <CardList \n          monsters={modifiedMonsters}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}